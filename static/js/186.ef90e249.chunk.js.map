{"version":3,"file":"static/js/186.ef90e249.chunk.js","mappings":"wRAMaA,EAAU,WACrB,IAAQC,GAAaC,EAAAA,EAAAA,MAAbD,SACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAgCF,EAAAA,EAAAA,WAAS,GAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,MAEAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,sGAEIH,GAAY,GAFhB,UAG8BI,EAAAA,EAAAA,IAAmBV,GAHjD,gBAGYW,EAHZ,EAGYA,QACRP,EAAWO,GAJf,gDAMIH,EAAS,EAAD,IANZ,yBAQIF,GAAY,GARhB,6EADc,uBAAC,WAAD,wBAYdM,KACC,CAACZ,IAEJ,IAAMa,EAAsBV,EAAQW,OAAS,EAE7C,OACE,UAAC,IAAD,CAAKC,GAAG,IAAR,UACGR,IAAS,2EACTF,IAAY,SAAC,IAAD,IACZQ,GACC,wBACGV,EAAQa,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASC,EAApB,EAAoBA,GAApB,OACX,2BACE,uCAAeF,MACf,uBAAIC,MAFGC,SAOb,wE,0MCzCFC,EAAS,mCAEfC,IAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAiB,mCAAG,oGACRD,IAAAA,IAAA,sCAAyCD,IADjC,cACzBG,EADyB,yBAExBA,EAASC,MAFe,2CAAH,qDAKjBC,EAAgB,mCAAG,WAAMN,GAAN,uFACPE,IAAAA,IAAA,iBAAoBF,EAApB,oBAAkCC,IAD3B,cACxBG,EADwB,yBAEvBA,EAASC,MAFc,2CAAH,sDAKhBE,EAAgB,mCAAG,WAAMC,GAAN,uFACPN,IAAAA,IAAA,+BACGD,EADH,kBACmBO,EADnB,YADO,cACxBJ,EADwB,yBAIvBA,EAASC,MAJc,2CAAH,sDAOhBI,EAAe,mCAAG,WAAMT,GAAN,uFACNE,IAAAA,IAAA,iBAAoBF,EAApB,4BAA0CC,IADpC,cACvBG,EADuB,yBAEtBA,EAASC,MAFa,2CAAH,sDAKfd,EAAkB,mCAAG,WAAMS,GAAN,uFACTE,IAAAA,IAAA,iBAAoBF,EAApB,4BAA0CC,IADjC,cAC1BG,EAD0B,yBAEzBA,EAASC,MAFgB,2CAAH","sources":["components/Reviews/Reviews.jsx","service/api.js"],"sourcesContent":["import { getReviewsInfoById } from 'service/api';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from 'components/Loader/Loader';\nimport { Box } from 'components/Box/Box';\n\nexport const Reviews = () => {\n  const { moviesId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [isLoader, setIsLoader] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function getCast() {\n      try {\n        setIsLoader(true);\n        const { results } = await getReviewsInfoById(moviesId);\n        setReviews(results);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoader(false);\n      }\n    }\n    getCast();\n  }, [moviesId]);\n\n  const shouldRenderReviews = reviews.length > 0;\n\n  return (\n    <Box mt=\"4\">\n      {error && <p>Something went wrong, please reload the page...</p>}\n      {isLoader && <Loader />}\n      {shouldRenderReviews ? (\n        <ul>\n          {reviews.map(({ author, content, id }) => (\n            <li key={id}>\n              <b>Autorname: {author}</b>\n              <p>{content}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>There are no reviews for this film yet.</p>\n      )}\n    </Box>\n  );\n};\n","import axios from 'axios';\n\nconst MY_KEY = 'b49485b850e1a5911c943abe3524caa9';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(`/trending/movie/day?api_key=${MY_KEY}`);\n  return response.data;\n};\n\nexport const getMovieInfoById = async id => {\n  const response = await axios.get(`/movie/${id}?api_key=${MY_KEY}`);\n  return response.data;\n};\n\nexport const getMoviesByQuery = async query => {\n  const response = await axios.get(\n    `search/movie?api_key=${MY_KEY}&query=${query}&page=1`\n  );\n  return response.data;\n};\n\nexport const getCastInfoById = async id => {\n  const response = await axios.get(`/movie/${id}/credits?api_key=${MY_KEY}`);\n  return response.data;\n};\n\nexport const getReviewsInfoById = async id => {\n  const response = await axios.get(`/movie/${id}/reviews?api_key=${MY_KEY}`);\n  return response.data;\n};\n"],"names":["Reviews","moviesId","useParams","useState","reviews","setReviews","isLoader","setIsLoader","error","setError","useEffect","getReviewsInfoById","results","getCast","shouldRenderReviews","length","mt","map","author","content","id","MY_KEY","axios","getTrendingMovies","response","data","getMovieInfoById","getMoviesByQuery","query","getCastInfoById"],"sourceRoot":""}